##
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
#cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
#securityManager.cacheManager = $cacheManager

shiro.loginUrl = /login.jsp
#authc.successUrl = /whatever

# Auth
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = SELECT password from users where user_name = ?
jdbcRealm.userRolesQuery = select role_name from user_roles where user_name = ?


ds = org.hsqldb.jdbc.JDBCDataSource
#ds.url = localhost:9001
ds.url = jdbc:hsqldb:hsql://localhost:9001/
ds.user = SA
#ds.password =

jdbcRealm.dataSource= $ds


# ensure the securityManager uses our native SessionManager
#sessionManager = org.apache.shiro.session.mgt.DefaultSessionManager
#securityManager.sessionManager = $sessionManager
securityManager.realms = $jdbcRealm
#securityManager.realms = $ldapRealm

#set the sessionManager to use an enterprise cache for backing storage:
#sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
#securityManager.sessionManager.sessionDAO = $sessionDAO


#cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
#securityManager.cacheManager = $cacheManager

#anyofroles = rzd.pktbcct.shiro.web.filter.authz.AnyOfRolesAuthorizationFilter

#Remember Me
rememberMe = org.apache.shiro.web.mgt.CookieRememberMeManager
securityManager.rememberMeManager = $rememberMe
# The 'cipherKey' attribute is a byte array.    By default, text values
# for all byte array properties are expected to be Base64 encoded:
securityManager.rememberMeManager.cipherKey =  kPH+bIxk5D2deZiIxcaaaA==
#However, if you prefer to use Hex encoding instead, you must prefix the String token with 0x (‘zero’ ‘x’):
#securityManager.rememberMeManager.cipherKey = 0x3707344A4093822299F31D008



[users]
# format: username = password, role1, role2, ..., roleN
guest = guest,guest

#[roles]
# format: roleName = permission1, permission2, ..., permissionN
#admin = *
#schwartz = lightsaber:*
#goodguy = winnebago:drive:eagle5

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/login.jsp = authc
/logout = logout
/account/** = authc,roles["group1"]
#/* = authcBasic
#/remoting/** = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]


